buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.16"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'checkstyle'
preBuild.dependsOn 'Checkstyle'
preBuild.dependsOn 'detekt'

checkstyle {
    ignoreFailures false
    showViolations true
    toolVersion = "8.11"
}

task Checkstyle(type: Checkstyle, group: "codeCorrectness") {
    configFile rootProject.file('checkstyle.xml')
    source 'src/'
    ignoreFailures false
    showViolations true
    include '**/*.java'
    include '**/*.kt'

    classpath = files()
}

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 9
        versionName "1.2.7"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

publishing {
    publications {
        aar(MavenPublication) {
            setGroupId("com.hushed")
            setArtifactId("waveformview")
            version android.defaultConfig.versionName
            artifact("$buildDir/outputs/aar/waveformview-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.getByName("archives").allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified" == it.name) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'gradle-dev-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        } defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'gradle-dev'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'
}

repositories {
    mavenCentral()
    jcenter()
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    packageOptions {
        prefix = "android" // will match kotlin.internal and all sub-packages of it
        suppress = true
    }
}

task dokkaMarkdown(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'gfm'
    outputDirectory = "$buildDir/markdown"
    packageOptions {
        prefix = "android" // will match kotlin.internal and all sub-packages of it
        suppress = true
    }
}

tasks.withType(Javadoc).all {
    enabled = false
}